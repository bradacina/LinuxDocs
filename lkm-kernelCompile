http://tldp.org/HOWTO/Module-HOWTO/x146.html

/lib/modules <- contains the LKMs for different kernel versions

insmod lkm.ko <- loads a lkm into the kernel

cat /proc/kallsyms <- lists all symbols exported by the kernel including the ones exported by the LKMs

lsmod = cat /proc/modules <- lists all LKMs that are loaded

rmmod lkm.ko <- unloads an LKM from the kernel

cat /proc/devices <- shows what device drivers have registered themselves
cat /proc/interrupts <- shows what device drivers are handling what interrupts

dmesg = cat /var/log/messages <- kernel level log messages

cat /proc/net/dev <- show a list of registered network device names

modprobe <- program that intelligently loads LKMs resolving dependencies

depmod <- inspects modules and determines dependencies. generates a dependency file that modprobe will use

??? /etc/modules.conf ??? /etc/modprobe.d <- modprobe configuration, aliases, etc

??? kerneld <- automatic loading of LKM when they are demanded
??? Keventd ???


-------------------------------------------------------------

init_module <- subroutine in LKM that gets called by the kernel at load time
<- the LKM needs to tell the kernel about any subroutines that the kernel should register/use when needing to perform operations using the LKM

the LKM maintains information about the symbols that it exports in the 
__ksymtab and .kstrtab section in the LKM object file

.modinfo section contains the kernel release number for which the module was build and describes the form of LKM parameters expected

objdump lkm.ko --section-headers <- see all section headers of the object file
objdump lkm.ko --full-contents --section=.modinfo <- show contents of the .modinfo section
modinfo lkm.ko <- show contents of the .modinfo section

??? ksymooops ??? <- lookup LKM name and symbol based on address ? insmod will insert new symbols for each LKM to help with this lookup 

THE HEADERS/SOURCE FOR THE CURRENTLY RUNNING KERNEL CAN BE FOUND IN
/usr/src/linux-headers-3.8.0-xx-generic
THE PACKAGE IS CALLED linux-headers-3.8.0-xx-generic



------------------------------------------------------------
create a file system for your new distro:

dd if=/dev/zero of=/some/folder/file.raw count=1 bs=10G <- create a zeroed out file of size 10GB
mkfs.ext4 -F file.raw <- format the file system in file.raw to ext4
mount file.raw /some/mount/point <- mount the newly created file system to a mount point in the host system
... steps missing here for adding base packages
... to make the partition bootable
... and install a bootloader

The compiled kernel should be found in arc/$arc/vmlinux where the kernel was compiled
-------------------------------------------------------------

Building the kernel


kbuild <- the kernel build system - read Documentation/kbuild folder in the kernel source tree

download linux kernel and unzip into folder
make mrproper <- to clear any stale .o files in the linux kernel source
make menuconfig <- to configure the new kernel

After menuconfig is executed, ensure that the generated .config file turns off debug symbols (cat .config | grep DEBUG_INFO) to save on the
size on disk of the generated kernel and kernel modules


make CC="ccache gcc" -j 8 <- to make a compressed image of the kernel ( specify 8 processors to be used during build ), use ccache to speed up build

make modules_install INSTALL_MOD_STRIP=1 <- copies the modules over to the current file system (BAD) (maybe use fakeroot) (strip debug symbols to make modules smaller )
make install INSTALL_MOD_STRIP=1 <- copies the kernel over to the boot folder and updates grub (BAD) (use fakeroot) (strip debug symbols to make modules smaller )
make headers_install <- copies the headers over to the current file system (BAD) (use fakeroot)


make deb-pkg <- creates debian packages with the linux image, linux headers and places them somewhere...???? where????
-------------------------------------------------------------
user mode linux:

make mrproper
make mrproper ARCH=um
make menuconfig ARCH=um
make ARCH=um -j 8 <- specify 8 processors to be used during build
./linux rootfstype=hostfs
